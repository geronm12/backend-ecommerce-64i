// controller.test.js
import { test } from "vitest";

module("Controller Tests", (test, { mock, assert }) => {
  const { getStudents } = require("./controller");

  test("should fetch all students when no query parameter is provided", async () => {
    // Mock Express-like request and response objects
    const req = { query: {} };
    const res = { send: mock.fn() };

    // Mock StudentScheme.find to return a sample array of students
    const mockStudents = [
      { nombre: "John", apellido: "Doe" },
      { nombre: "Jane", apellido: "Doe" },
    ];

    const mockFind = mock.fn(() => Promise.resolve(mockStudents));
    const mockStudentScheme = { find: mockFind };

    // Use a spy to mock the StudentScheme import
    const originalStudentScheme = require("./StudentScheme");
    mock("./StudentScheme", mockStudentScheme);

    // Call the controller function
    await getStudents(req, res);

    // Assertions
    assert.equal(mockFind.calls.length, 1); // Ensure StudentScheme.find is called once
    assert.equal(res.send.calls.length, 1); // Ensure res.send is called once

    // Check the HTML string generated by the controller
    const expectedHtmlString = `<div><label style='font-size:16px;color:blue; font-weight:bold;'>John Doe</label></div><div><label style='font-size:16px;color:blue; font-weight:bold;'>Jane Doe</label></div>`;
    assert.equal(res.send.calls[0].arguments[0], expectedHtmlString);

    // Restore the original StudentScheme import
    mock("./StudentScheme", originalStudentScheme);
  });

  test("should fetch students with a specific name when a query parameter is provided", async () => {
    // Mock Express-like request and response objects
    const req = { query: { nombre: "John" } };
    const res = { send: mock.fn() };

    // Mock StudentScheme.find to return a sample array of students with the specified name
    const mockStudents = [{ nombre: "John", apellido: "Doe" }];
    const mockFind = mock.fn(() => Promise.resolve(mockStudents));
    const mockStudentScheme = { find: mockFind };

    // Use a spy to mock the StudentScheme import
    const originalStudentScheme = require("./StudentScheme");
    mock("./StudentScheme", mockStudentScheme);

    // Call the controller function
    await getStudents(req, res);

    // Assertions
    assert.equal(mockFind.calls.length, 1); // Ensure StudentScheme.find is called once
    assert.equal(res.send.calls.length, 1); // Ensure res.send is called once

    // Check the HTML string generated by the controller
    const expectedHtmlString = `<div><label style='font-size:16px;color:blue; font-weight:bold;'>John Doe</label></div>`;
    assert.equal(res.send.calls[0].arguments[0], expectedHtmlString);

    // Restore the original StudentScheme import
    mock("./StudentScheme", originalStudentScheme);
  });
});
